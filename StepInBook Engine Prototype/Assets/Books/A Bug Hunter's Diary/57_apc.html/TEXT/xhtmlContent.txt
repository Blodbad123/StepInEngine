<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Appendix C. Mitigation</title><link rel="stylesheet" href="core.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.74.0"/></head><body><div class="appendix" title="Appendix C. Mitigation"><div class="titlepage"><div><div><h1 class="title"><a id="mitigation"/>Appendix C. Mitigation</h1></div></div></div><p>This appendix contains information about mitigation techniques.<a id="IDX-APP-C-0092" class="indexterm"/><a id="IDX-APP-C-0093" class="indexterm"/></p><div class="sect1" title="C.1 Exploit Mitigation Techniques"><div class="titlepage"><div><div><h1 class="title"><a id="c.1_exploit_mitigation_techniques"/>C.1 Exploit Mitigation Techniques</h1></div></div></div><p>Various exploit mitigation techniques and mechanisms available today are designed to make exploiting memory corruption vulnerabilities as difficult as possible. The most prevalent ones are these:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Address Space Layout Randomization (ASLR)<a id="IDX-APP-C-0094" class="indexterm"/></p></li><li class="listitem"><p>Security Cookies (/GS), Stack-Smashing Protection (SSP), or Stack Canaries<a id="IDX-APP-C-0095" class="indexterm"/><a id="IDX-APP-C-0096" class="indexterm"/></p></li><li class="listitem"><p>Data Execution Prevention (DEP) or No eXecute (NX)<a id="IDX-APP-C-0097" class="indexterm"/></p></li></ul></div><p>There are other mitigation techniques that are bound to an operating system platform, a special heap implementation, or a file format like SafeSEH, SEHOP, or RELRO (see Section C.2). There are also various heap mitigation techniques (heap cookies, randomization, safe unlinking, etc.).<a id="IDX-APP-C-0098" class="indexterm"/></p><p>The many mitigation techniques could easily fill another book, so I will focus on the most prevalent ones, as well as on some tools used to detect them.<a id="IDX-APP-C-0099" class="indexterm"/><a id="IDX-APP-C-0100" class="indexterm"/><a id="IDX-APP-C-0101" class="indexterm"/></p><div class="note" title="Note"><h3 class="title">Note</h3><p>There is a continuous race between exploit mitigation techniques and ways of bypassing them. Even systems using all of these mechanisms may be successfully exploited under certain circumstances.</p></div><div class="sect2" title="Address Space Layout Randomization (ASLR)"><div class="titlepage"><div><div><h2 class="title"><a id="address_space_layout_randomization_open"/>Address Space Layout Randomization (ASLR)</h2></div></div></div><p>ASLR randomizes the location of key areas of a process space (usually the base address of the executable, the position of the stack, the heap, the libraries, and others) to prevent an exploit writer from predicting target addresses. Say you find a <span class="emphasis"><em>write4 primitive</em></span> vulnerability that presents you with the opportunity to write 4 bytes of your choosing to any memory location you like. That gives you a powerful exploit if you choose a stable memory location to overwrite. If ASLR is in place, it’s much harder to find a reliable memory location to overwrite. Of course, ASLR is effective only if it’s implemented correctly.<sup>[<a href="apcs03.html#ftn.APP-C-FN-1" class="footnoteref">100</a>]</sup></p></div><div class="sect2" title="Security Cookies (/GS), Stack-Smashing Protection (SSP), or Stack Canaries"><div class="titlepage"><div><div><h2 class="title"><a id="security_cookies_open_parenthesis_solidu"/>Security Cookies (/GS), Stack-Smashing Protection (SSP), or Stack Canaries</h2></div></div></div><p>These methods normally inject a canary or cookie into a stack frame to protect the function’s metadata associated with procedure invocation (e.g., the return address). Before the return address is processed, the validity of the cookie or canary is checked, and the data in the stack frame is reorganized to protect the pointers and arguments of the function. If you find a stack buffer overflow in a function that is protected by this mitigation technique, exploitation can be tough.<sup>[<a href="apcs03.html#ftn.APP-C-FN-2" class="footnoteref">101</a>]</sup></p></div><div class="sect2" title="NX and DEP"><div class="titlepage"><div><div><h2 class="title"><a id="nx_and_dep"/>NX and DEP</h2></div></div></div><p>The <span class="emphasis"><em>No eXecute (NX)</em></span> bit is a CPU feature that helps prevent code execution from data pages of a process. Many modern operating systems take advantage of the NX bit. Under Microsoft Windows, hardware-enforced <span class="emphasis"><em>Data Execution Prevention (DEP)</em></span> enables the NX bit on compatible CPUs and marks all memory locations in a process as nonexecutable unless the location explicitly contains executable code. DEP was introduced in Windows XP SP2 and Windows Server 2003 SP1. Under Linux, NX is enforced by the kernel on 64-bit CPUs of AMD and Intel. ExecShield<sup>[<a href="apcs03.html#ftn.APP-C-FN-3" class="footnoteref">102</a>]</sup> and PaX<sup>[<a href="apcs03.html#ftn.APP-C-FN-4" class="footnoteref">103</a>]</sup> emulate the NX functionality on older 32-bit x86 CPUs under Linux.<a id="IDX-APP-C-0102" class="indexterm"/></p></div><div class="sect2" title="Detecting Exploit Mitigation Techniques"><div class="titlepage"><div><div><h2 class="title"><a id="detecting_exploit_mitigation_techniques"/>Detecting Exploit Mitigation Techniques</h2></div></div></div><p>Before you can try to circumvent these mitigation techniques, you have to determine which ones an application or a running process actually uses.<a id="IDX-APP-C-0103" class="indexterm"/><a id="IDX-APP-C-0104" class="indexterm"/></p><p>Mitigations can be controlled by system policy, by special APIs, and by compile-time options. For example, the default system-wide DEP policy for Windows client–operating systems is called OptIn. In this mode of operation, DEP is enabled only for processes that explicitly opt in to DEP. There are different ways to opt a process in to DEP. For example, you could use the appropriate linker switch (/NXCOMPAT) at compile time, or you could use the <code class="literal">SetProcessDEPPolicy</code> API to allow an application to opt in to DEP programmatically. Windows supports four system-wide configurations for hardware-enforced DEP.<sup>[<a href="apcs03.html#ftn.APP-C-FN-5" class="footnoteref">104</a>]</sup> On Windows Vista and later, you can use the <span class="emphasis"><em>bcdedit.exe</em></span> console application to verify the system-wide DEP policy, but this must be done from an elevated Windows command prompt. To verify the DEP and ASLR settings of an application, you can use Sysinternals’s Process Explorer.<sup>[<a href="apcs03.html#ftn.APP-C-FN-6" class="footnoteref">105</a>]</sup><a id="IDX-APP-C-0105" class="indexterm"/></p><div class="note" title="Note"><h3 class="title">Note</h3><p>To configure Process Explorer so that it shows the processes’ DEP and ASLR status, add the following columns to the view: <span class="strong"><strong>View</strong></span> ▸ <span class="strong"><strong>Select Columns</strong></span> ▸ <span class="strong"><strong>DEP Status</strong></span> and <span class="strong"><strong>View</strong></span> ▸ <span class="strong"><strong>Select Columns</strong></span> ▸ <span class="strong"><strong>ASLR Enabled</strong></span>. Additionally, set the lower pane to view DLLs for a process and add the “ASLR Enabled” column to the view (see <a class="xref" href="apc.html#dep_and_aslr_status_shown_in_process_exp" title="Figure C-1. DEP and ASLR status shown in Process Explorer">Figure C-1</a>).</p></div><p>The newer versions of Windows (Vista or later) also support ASLR by default, but the DLLs and EXEs must opt in to support ASLR using the /DYNAMICBASE linker option. It is important to note that protection is significantly weaker if not all modules of a process opt in to ASLR. In practice, the effectiveness of mitigations like DEP and ASLR is heavily dependent on how completely each mitigation technology has been enabled by an application.<sup>[<a href="apcs03.html#ftn.APP-C-FN-7" class="footnoteref">106</a>]</sup></p><p><a class="xref" href="apc.html#dep_and_aslr_status_shown_in_process_exp" title="Figure C-1. DEP and ASLR status shown in Process Explorer">Figure C-1</a> shows an example of Process Explorer being used to observe the DEP and ASLR settings of Internet Explorer. Note that the Java DLLs that have been loaded into the context of Internet Explorer do not make use of ASLR (denoted by an empty value for the ASLR column in the lower pane). Microsoft has also released a tool called <span class="emphasis"><em>BinScope Binary Analyzer</em></span>,<sup>[<a href="apcs03.html#ftn.APP-C-FN-8" class="footnoteref">107</a>]</sup> which analyzes binaries for a wide variety of security protections with a straightforward, easy-to-use interface.</p><p>If both DEP and ASLR are correctly deployed, exploit development is a lot harder.</p><p>To see if a Windows binary supports the security cookie (/GS) mitigation technique, you can disassemble the binary with IDA Pro and look for references to the security cookie in the function epilogue and prologue, as shown in <a class="xref" href="apc.html#security_cookie_open_parenthesis_solidus" title="Figure C-2. Security cookie (/GS) reference in the function prologue and epilogue (IDA Pro)">Figure C-2</a>.</p><div class="figure"><a id="dep_and_aslr_status_shown_in_process_exp"/><div class="figure-contents"><div class="mediaobject"><a id="I_mediaobject_d1e12330"/><img src="httpatomoreillycomsourcenostarchimages939357.png.jpg" alt="DEP and ASLR status shown in Process Explorer"/></div></div><p class="title">Figure C-1. DEP and ASLR status shown in Process Explorer</p></div><div class="figure"><a id="security_cookie_open_parenthesis_solidus"/><div class="figure-contents"><div class="mediaobject"><a id="I_mediaobject_d1e12338"/><img src="httpatomoreillycomsourcenostarchimages939359.png.jpg" alt="Security cookie (/GS) reference in the function prologue and epilogue (IDA Pro)"/></div></div><p class="title">Figure C-2. Security cookie (/GS) reference in the function prologue and epilogue (IDA Pro)</p></div><p>To check the system-wide configurations of Linux systems as well as ELF binaries and processes for different exploit mitigation techniques, you can use my <code class="literal">checksec.sh</code><sup>[<a href="apcs03.html#ftn.APP-C-FN-9" class="footnoteref">108</a>]</sup> script.<a id="IDX-APP-C-0106" class="indexterm"/><a id="IDX-APP-C-0107" class="indexterm"/><a id="IDX-APP-C-0108" class="indexterm"/><a id="IDX-APP-C-0109" class="indexterm"/><a id="IDX-APP-C-0110" class="indexterm"/></p></div></div></div></body></html>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Appendix C. Mitigation</title><link rel="stylesheet" href="core.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.74.0"/></head><body><div class="appendix" title="Appendix C. Mitigation"><div class="titlepage"><div><div><h1 class="title"><a id="mitigation"/>Appendix C. Mitigation</h1></div></div></div><p>This appendix contains information about mitigation techniques.<a id="IDX-APP-C-0092" class="indexterm"/><a id="IDX-APP-C-0093" class="indexterm"/></p><div class="sect1" title="C.1 Exploit Mitigation Techniques"><div class="titlepage"><div><div><h1 class="title"><a id="c.1_exploit_mitigation_techniques"/>C.1 Exploit Mitigation Techniques</h1></div></div></div><p>Various exploit mitigation techniques and mechanisms available today are designed to make exploiting memory corruption vulnerabilities as difficult as possible. The most prevalent ones are these:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Address Space Layout Randomization (ASLR)<a id="IDX-APP-C-0094" class="indexterm"/></p></li><li class="listitem"><p>Security Cookies (/GS), Stack-Smashing Protection (SSP), or Stack Canaries<a id="IDX-APP-C-0095" class="indexterm"/><a id="IDX-APP-C-0096" class="indexterm"/></p></li><li class="listitem"><p>Data Execution Prevention (DEP) or No eXecute (NX)<a id="IDX-APP-C-0097" class="indexterm"/></p></li></ul></div><p>There are other mitigation techniques that are bound to an operating system platform, a special heap implementation, or a file format like SafeSEH, SEHOP, or RELRO (see Section C.2). There are also various heap mitigation techniques (heap cookies, randomization, safe unlinking, etc.).<a id="IDX-APP-C-0098" class="indexterm"/></p><p>The many mitigation techniques could easily fill another book, so I will focus on the most prevalent ones, as well as on some tools used to detect them.<a id="IDX-APP-C-0099" class="indexterm"/><a id="IDX-APP-C-0100" class="indexterm"/><a id="IDX-APP-C-0101" class="indexterm"/></p><div class="note" title="Note"><h3 class="title">Note</h3><p>There is a continuous race between exploit mitigation techniques and ways of bypassing them. Even systems using all of these mechanisms may be successfully exploited under certain circumstances.</p></div><div class="sect2" title="Address Space Layout Randomization (ASLR)"><div class="titlepage"><div><div><h2 class="title"><a id="address_space_layout_randomization_open"/>Address Space Layout Randomization (ASLR)</h2></div></div></div><p>ASLR randomizes the location of key areas of a process space (usually the base address of the executable, the position of the stack, the heap, the libraries, and others) to prevent an exploit writer from predicting target addresses. Say you find a <span class="emphasis"><em>write4 primitive</em></span> vulnerability that presents you with the opportunity to write 4 bytes of your choosing to any memory location you like. That gives you a powerful exploit if you choose a stable memory location to overwrite. If ASLR is in place, it’s much harder to find a reliable memory location to overwrite. Of course, ASLR is effective only if it’s implemented correctly.<sup>[<a href="apcs03.html#ftn.APP-C-FN-1" class="footnoteref">100</a>]</sup></p></div><div class="sect2" title="Security Cookies (/GS), Stack-Smashing Protection (SSP), or Stack Canaries"><div class="titlepage"><div><div><h2 class="title"><a id="security_cookies_open_parenthesis_solidu"/>Security Cookies (/GS), Stack-Smashing Protection (SSP), or Stack Canaries</h2></div></div></div><p>These methods normally inject a canary or cookie into a stack frame to protect the function’s metadata associated with procedure invocation (e.g., the return address). Before the return address is processed, the validity of the cookie or canary is checked, and the data in the stack frame is reorganized to protect the pointers and arguments of the function. If you find a stack buffer overflow in a function that is protected by this mitigation technique, exploitation can be tough.<sup>[<a href="apcs03.html#ftn.APP-C-FN-2" class="footnoteref">101</a>]</sup></p></div><div class="sect2" title="NX and DEP"><div class="titlepage"><div><div><h2 class="title"><a id="nx_and_dep"/>NX and DEP</h2></div></div></div><p>The <span class="emphasis"><em>No eXecute (NX)</em></span> bit is a CPU feature that helps prevent code execution from data pages of a process. Many modern operating systems take advantage of the NX bit. Under Microsoft Windows, hardware-enforced <span class="emphasis"><em>Data Execution Prevention (DEP)</em></span> enables the NX bit on compatible CPUs and marks all memory locations in a process as nonexecutable unless the location explicitly contains executable code. DEP was introduced in Windows XP SP2 and Windows Server 2003 SP1. Under Linux, NX is enforced by the kernel on 64-bit CPUs of AMD and Intel. ExecShield<sup>[<a href="apcs03.html#ftn.APP-C-FN-3" class="footnoteref">102</a>]</sup> and PaX<sup>[<a href="apcs03.html#ftn.APP-C-FN-4" class="footnoteref">103</a>]</sup> emulate the NX functionality on older 32-bit x86 CPUs under Linux.<a id="IDX-APP-C-0102" class="indexterm"/></p></div><div class="sect2" title="Detecting Exploit Mitigation Techniques"><div class="titlepage"><div><div><h2 class="title"><a id="detecting_exploit_mitigation_techniques"/>Detecting Exploit Mitigation Techniques</h2></div></div></div><p>Before you can try to circumvent these mitigation techniques, you have to determine which ones an application or a running process actually uses.<a id="IDX-APP-C-0103" class="indexterm"/><a id="IDX-APP-C-0104" class="indexterm"/></p><p>Mitigations can be controlled by system policy, by special APIs, and by compile-time options. For example, the default system-wide DEP policy for Windows client–operating systems is called OptIn. In this mode of operation, DEP is enabled only for processes that explicitly opt in to DEP. There are different ways to opt a process in to DEP. For example, you could use the appropriate linker switch (/NXCOMPAT) at compile time, or you could use the <code class="literal">SetProcessDEPPolicy</code> API to allow an application to opt in to DEP programmatically. Windows supports four system-wide configurations for hardware-enforced DEP.<sup>[<a href="apcs03.html#ftn.APP-C-FN-5" class="footnoteref">104</a>]</sup> On Windows Vista and later, you can use the <span class="emphasis"><em>bcdedit.exe</em></span> console application to verify the system-wide DEP policy, but this must be done from an elevated Windows command prompt. To verify the DEP and ASLR settings of an application, you can use Sysinternals’s Process Explorer.<sup>[<a href="apcs03.html#ftn.APP-C-FN-6" class="footnoteref">105</a>]</sup><a id="IDX-APP-C-0105" class="indexterm"/></p><div class="note" title="Note"><h3 class="title">Note</h3><p>To configure Process Explorer so that it shows the processes’ DEP and ASLR status, add the following columns to the view: <span class="strong"><strong>View</strong></span> ▸ <span class="strong"><strong>Select Columns</strong></span> ▸ <span class="strong"><strong>DEP Status</strong></span> and <span class="strong"><strong>View</strong></span> ▸ <span class="strong"><strong>Select Columns</strong></span> ▸ <span class="strong"><strong>ASLR Enabled</strong></span>. Additionally, set the lower pane to view DLLs for a process and add the “ASLR Enabled” column to the view (see <a class="xref" href="apc.html#dep_and_aslr_status_shown_in_process_exp" title="Figure C-1. DEP and ASLR status shown in Process Explorer">Figure C-1</a>).</p></div><p>The newer versions of Windows (Vista or later) also support ASLR by default, but the DLLs and EXEs must opt in to support ASLR using the /DYNAMICBASE linker option. It is important to note that protection is significantly weaker if not all modules of a process opt in to ASLR. In practice, the effectiveness of mitigations like DEP and ASLR is heavily dependent on how completely each mitigation technology has been enabled by an application.<sup>[<a href="apcs03.html#ftn.APP-C-FN-7" class="footnoteref">106</a>]</sup></p><p><a class="xref" href="apc.html#dep_and_aslr_status_shown_in_process_exp" title="Figure C-1. DEP and ASLR status shown in Process Explorer">Figure C-1</a> shows an example of Process Explorer being used to observe the DEP and ASLR settings of Internet Explorer. Note that the Java DLLs that have been loaded into the context of Internet Explorer do not make use of ASLR (denoted by an empty value for the ASLR column in the lower pane). Microsoft has also released a tool called <span class="emphasis"><em>BinScope Binary Analyzer</em></span>,<sup>[<a href="apcs03.html#ftn.APP-C-FN-8" class="footnoteref">107</a>]</sup> which analyzes binaries for a wide variety of security protections with a straightforward, easy-to-use interface.</p><p>If both DEP and ASLR are correctly deployed, exploit development is a lot harder.</p><p>To see if a Windows binary supports the security cookie (/GS) mitigation technique, you can disassemble the binary with IDA Pro and look for references to the security cookie in the function epilogue and prologue, as shown in <a class="xref" href="apc.html#security_cookie_open_parenthesis_solidus" title="Figure C-2. Security cookie (/GS) reference in the function prologue and epilogue (IDA Pro)">Figure C-2</a>.</p><div class="figure"><a id="dep_and_aslr_status_shown_in_process_exp"/><div class="figure-contents"><div class="mediaobject"><a id="I_mediaobject_d1e12330"/><img src="httpatomoreillycomsourcenostarchimages939357.png.jpg" alt="DEP and ASLR status shown in Process Explorer"/></div></div><p class="title">Figure C-1. DEP and ASLR status shown in Process Explorer</p></div><div class="figure"><a id="security_cookie_open_parenthesis_solidus"/><div class="figure-contents"><div class="mediaobject"><a id="I_mediaobject_d1e12338"/><img src="httpatomoreillycomsourcenostarchimages939359.png.jpg" alt="Security cookie (/GS) reference in the function prologue and epilogue (IDA Pro)"/></div></div><p class="title">Figure C-2. Security cookie (/GS) reference in the function prologue and epilogue (IDA Pro)</p></div><p>To check the system-wide configurations of Linux systems as well as ELF binaries and processes for different exploit mitigation techniques, you can use my <code class="literal">checksec.sh</code><sup>[<a href="apcs03.html#ftn.APP-C-FN-9" class="footnoteref">108</a>]</sup> script.<a id="IDX-APP-C-0106" class="indexterm"/><a id="IDX-APP-C-0107" class="indexterm"/><a id="IDX-APP-C-0108" class="indexterm"/><a id="IDX-APP-C-0109" class="indexterm"/><a id="IDX-APP-C-0110" class="indexterm"/></p></div></div></div></body></html>
