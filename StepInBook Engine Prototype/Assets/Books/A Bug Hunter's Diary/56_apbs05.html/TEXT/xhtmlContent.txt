<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>B.5 Using Linux as a Mac OS X Kernel-Debugging Host</title><link rel="stylesheet" href="core.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.74.0"/></head><body><div class="sect1" title="B.5 Using Linux as a Mac OS X Kernel-Debugging Host"><div class="titlepage"><div><div><h1 class="title"><a id="b.5_using_linux_as_a_mac_os_x_kernel-deb"/>B.5 Using Linux as a Mac OS X Kernel-Debugging Host</h1></div></div></div><p>In this section, I will detail the steps I performed to prepare a Linux system as a debugging host for the Mac OS X kernel:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Step 1: Install an ancient Red Hat 7.3 Linux operating system.<a id="IDX-APP-B-0088" class="indexterm"/></p></li><li class="listitem"><p>Step 2: Get the necessary software packages.</p></li><li class="listitem"><p>Step 3: Build Apple’s debugger on the Linux host.<a id="IDX-APP-B-0089" class="indexterm"/></p></li><li class="listitem"><p>Step 4: Prepare the debugging environment.</p></li></ul></div><div class="sect2" title="Step 1: Install an Ancient Red Hat 7.3 Linux Operating System"><div class="titlepage"><div><div><h2 class="title"><a id="step_1_colon_install_an_ancient_red_hat"/>Step 1: Install an Ancient Red Hat 7.3 Linux Operating System</h2></div></div></div><p>Because Apple’s GNU Debugger (gdb) version that I used needs a GNU C Compiler (gcc) less than version 3 to build correctly, I downloaded and installed an ancient Red Hat 7.3 Linux system.<sup>[<a href="apbs05.html#ftn.APP-B-FN-5" class="footnoteref">95</a>]</sup> To install the Red Hat system, I chose the installation type Custom. When I was asked to select the packages to install (Package Group Selection), I chose only the packages Network Support and Software Development, as well as OpenSSH server from the individual package selection. These packages include all the necessary development tools and libraries to build Apple’s gdb under Linux. During the installation, I added an unprivileged user called <code class="literal">tk</code> with a home directory under <span class="emphasis"><em>/home/tk</em></span>.</p></div><div class="sect2" title="Step 2: Get the Necessary Software Packages"><div class="titlepage"><div><div><h2 class="title"><a id="step_2_colon_get_the_necessary_software"/>Step 2: Get the Necessary Software Packages</h2></div></div></div><p>After I had successfully installed the Linux host, I downloaded the following software packages:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Source code of Apple’s custom gdb version.<sup>[<a href="apbs05.html#ftn.APP-B-FN-6" class="footnoteref">96</a>]</sup></p></li><li class="listitem"><p>Standard gdb source code from GNU.<sup>[<a href="apbs05.html#ftn.APP-B-FN-7" class="footnoteref">97</a>]</sup></p></li><li class="listitem"><p>A patch for Apple’s gdb to compile under Linux.<sup>[<a href="apbs05.html#ftn.APP-B-FN-8" class="footnoteref">98</a>]</sup></p></li><li class="listitem"><p>The appropriate source code version of the XNU kernel. I prepared the Linux debugging host to research the kernel bug described in <a class="xref" href="ch07.html" title="Chapter 7. A Bug Older Than 4.4BSD">Chapter 7</a>, so I downloaded the XNU version 792.13.8.<sup>[<a href="apbs05.html#ftn.APP-B-FN-9" class="footnoteref">99</a>]</sup><a id="IDX-APP-B-0090" class="indexterm"/></p></li><li class="listitem"><p>The appropriate version of Apple’s Kernel Debug Kit. I found the bug explored in <a class="xref" href="ch07.html" title="Chapter 7. A Bug Older Than 4.4BSD">Chapter 7</a> on Mac OS X 10.4.8, so I downloaded the corresponding Kernel Debug Kit version 10.4.8 (<span class="emphasis"><em>Kernel_Debug_Kit_10.4.8_8L2127.dmg</em></span>).<a id="IDX-APP-B-0091" class="indexterm"/></p></li></ul></div></div><div class="sect2" title="Step 3: Build Apple’s Debugger on the Linux Host"><div class="titlepage"><div><div><h2 class="title"><a id="step_3_colon_build_appleas_debugger_on_t"/>Step 3: Build Apple’s Debugger on the Linux Host</h2></div></div></div><p>After I downloaded the necessary software packages onto the Linux host, I unpacked the two versions of gdb:</p><a id="I_programlisting_d1e11863"/><pre class="programlisting">linux$ <strong class="userinput"><code>tar xvzf gdb-292.tar.gz</code></strong>
linux$ <strong class="userinput"><code>tar xvzf gdb-5.3.tar.gz</code></strong></pre><p>Then I replaced the <span class="emphasis"><em>mmalloc</em></span> directory of Apple’s source tree with the one from GNU gdb:</p><a id="I_programlisting_d1e11875"/><pre class="programlisting">linux$ <strong class="userinput"><code>mv gdb-292/src/mmalloc gdb-292/src/old_mmalloc</code></strong>
linux$ <strong class="userinput"><code>cp -R gdb-5.3/mmalloc gdb-292/src/</code></strong></pre><p>I applied the patch to Apple’s gdb version:</p><a id="I_programlisting_d1e11884"/><pre class="programlisting">linux$ <strong class="userinput"><code>cd gdb-292/src/</code></strong>
linux$ <strong class="userinput"><code>patch -p2 &lt; ../../osx_gdb.patch</code></strong>
patching file gdb/doc/stabs.texinfo
patching file gdb/fix-and-continue.c
patching file gdb/mach-defs.h
patching file gdb/macosx/macosx-nat-dyld.h
patching file gdb/mi/mi-cmd-stack.c</pre><p>I used the following commands to build the necessary libraries:</p><a id="I_programlisting_d1e11894"/><pre class="programlisting">linux$ <strong class="userinput"><code>su</code></strong>
Password:

linux# <strong class="userinput"><code>pwd</code></strong>
/home/tk/gdb-292/src

linux# <strong class="userinput"><code>cd readline</code></strong>
linux# <strong class="userinput"><code>./configure; make</code></strong>

linux# <strong class="userinput"><code>cd ../bfd</code></strong>
linux# <strong class="userinput"><code>./configure --target=i386-apple-darwin</code></strong>
 <strong class="userinput"><code>--program-suffix=_osx; make;</code></strong>                      → <strong class="userinput"><code>make install</code></strong>

linux# <strong class="userinput"><code>cd ../mmalloc</code></strong>
linux# <strong class="userinput"><code>./configure; make; make install</code></strong>

linux# <strong class="userinput"><code>cd ../intl</code></strong>
linux# <strong class="userinput"><code>./configure; make; make install</code></strong>

linux# <strong class="userinput"><code>cd ../libiberty</code></strong>
linux# <strong class="userinput"><code>./configure; make; make install</code></strong>

linux# <strong class="userinput"><code>cd ../opcodes</code></strong>
linux# <strong class="userinput"><code>./configure --target=i386-apple-darwin --program</code></strong>
<strong class="userinput"><code>-suffix=_osx; make;</code></strong>                      → <strong class="userinput"><code>make install</code></strong></pre><p>To build the debugger itself, I needed to copy some header files from the XNU kernel source code to the <span class="emphasis"><em>include</em></span> directory of the Linux host:</p><a id="I_programlisting_d1e11957"/><pre class="programlisting">linux# <strong class="userinput"><code>cd /home/tk</code></strong>
linux# <strong class="userinput"><code>tar -zxvf xnu-792.13.8.tar.gz</code></strong>
linux# <strong class="userinput"><code>cp -R xnu-792.13.8/osfmk/i386/ /usr/include/</code></strong>
linux# <strong class="userinput"><code>cp -R xnu-792.13.8/bsd/i386/ /usr/include/</code></strong>
cp: overwrite `/usr/include/i386/Makefile'? <strong class="userinput"><code>y</code></strong>
cp: overwrite `/usr/include/i386/endian.h'? <strong class="userinput"><code>y</code></strong>
cp: overwrite `/usr/include/i386/exec.h'? <strong class="userinput"><code>y</code></strong>
cp: overwrite `/usr/include/i386/setjmp.h'? <strong class="userinput"><code>y</code></strong>
linux# <strong class="userinput"><code>cp -R xnu-792.13.8/osfmk/mach /usr/include/</code></strong></pre><p>I then commented some typedefs in the new <span class="emphasis"><em>_types.h</em></span> file to avoid compile-time conflicts (see line 39, lines 43 to 49, and lines 78 to 81):</p><a id="I_programlisting_d1e11992"/><pre class="programlisting">linux# <strong class="userinput"><code>vi +38 /usr/include/i386/_types.h</code></strong>
[..]
     38 #ifdef __GNUC__
     <strong class="userinput"><code>39 // typedef __signed char           __int8_t;</code></strong>
     40 #else   /* !__GNUC__ */
     41 typedef char                    __int8_t;
     42 #endif  /* !__GNUC__ */
     <strong class="userinput"><code>43 // typedef unsigned char           __uint8_t;</code></strong>
     <strong class="userinput"><code>44 // typedef short                   __int16_t;</code></strong>
     <strong class="userinput"><code>45 // typedef unsigned short          __uint16_t;</code></strong>
     <strong class="userinput"><code>46 // typedef int                     __int32_t;</code></strong>
     <strong class="userinput"><code>47 // typedef unsigned int            __uint32_t;</code></strong>
     <strong class="userinput"><code>48 // typedef long long               __int64_t;</code></strong>
     <strong class="userinput"><code>49 // typedef unsigned long long      __uint64_t;</code></strong>
     ..
     <strong class="userinput"><code>78 //typedef union {</code></strong>
     <strong class="userinput"><code>79 //      char            __mbstate8[128];</code></strong>
     <strong class="userinput"><code>80 //      long long       _mbstateL;                      /* for alignment */</code></strong>
     <strong class="userinput"><code>81 //} __mbstate_t;</code></strong>
[..]</pre><p>I added a new <code class="literal">include</code> to the file <span class="emphasis"><em>/home/tk/gdb-292/src/gdb/macosx/i386-macosx-tdep.c</em></span> (see line 24):</p><a id="I_programlisting_d1e12043"/><pre class="programlisting">linux# <strong class="userinput"><code>vi +24 /home/tk/gdb-292/src/gdb/macosx/i386-macosx-tdep.c</code></strong>
[..]
     <strong class="userinput"><code>24 #include &lt;string.h&gt;</code></strong>
     25 #include "defs.h"
     26 #include "frame.h"
     27 #include "inferior.h"
[..]</pre><p>Finally, I compiled the debugger with the following commands:</p><a id="I_programlisting_d1e12053"/><pre class="programlisting">linux# <strong class="userinput"><code>cd gdb-292/src/gdb/</code></strong>
linux# <strong class="userinput"><code>./configure --target=i386-apple-darwin --program-suffix=_osx --disable-gdbtk</code></strong>
linux# <strong class="userinput"><code>make; make install</code></strong></pre><p>After the compilation completed, I ran the new debugger as root so that the necessary directories could be created under <span class="emphasis"><em>/usr/local/bin/</em></span>:</p><a id="I_programlisting_d1e12068"/><pre class="programlisting">linux# <strong class="userinput"><code>cd /home/tk</code></strong>
linux# <strong class="userinput"><code>gdb_osx -q</code></strong>
(gdb) <strong class="userinput"><code>quit</code></strong></pre><p>After that, the debugger was ready.</p></div><div class="sect2" title="Step 4: Prepare the Debugging Environment"><div class="titlepage"><div><div><h2 class="title"><a id="step_4_colon_prepare_the_debugging_envir"/>Step 4: Prepare the Debugging Environment</h2></div></div></div><p>I unpacked the downloaded Kernel Debug Kit disk image file (dmg) under Mac OS X, transferred the files per <code class="literal">scp</code> to the Linux host, and named the directory <span class="emphasis"><em>KernelDebugKit_10.4.8</em></span>. I also copied the XNU source code into the search path of the debugger:</p><a id="I_programlisting_d1e12091"/><pre class="programlisting">linux# <strong class="userinput"><code>mkdir /SourceCache</code></strong>
linux# <strong class="userinput"><code>mkdir /SourceCache/xnu</code></strong>
linux# <strong class="userinput"><code>mv xnu-792.13.8 /SourceCache/xnu/</code></strong></pre><p>In <a class="xref" href="ch07.html" title="Chapter 7. A Bug Older Than 4.4BSD">Chapter 7</a>, I described how the newly built kernel debugger can be used to connect to a Mac OS X machine.</p></div><div class="sect2" title="Notes"><div class="titlepage"><div><div><h2 class="title"><a id="notes-id9"/>Notes</h2></div></div></div><p><sup>[<a id="APP-B-FN-1" href="#ftn.APP-B-FN-1" class="footnote">91</a>]</sup></p><p><sup>[<a id="APP-B-FN-2" href="#ftn.APP-B-FN-2" class="footnote">92</a>]</sup></p><p><sup>[<a id="APP-B-FN-3" href="#ftn.APP-B-FN-3" class="footnote">93</a>]</sup></p><p><sup>[<a id="APP-B-FN-4" href="#ftn.APP-B-FN-4" class="footnote">94</a>]</sup></p><p><sup>[<a id="APP-B-FN-5" href="#ftn.APP-B-FN-5" class="footnote">95</a>]</sup></p><p><sup>[<a id="APP-B-FN-6" href="#ftn.APP-B-FN-6" class="footnote">96</a>]</sup></p><p><sup>[<a id="APP-B-FN-7" href="#ftn.APP-B-FN-7" class="footnote">97</a>]</sup></p><p><sup>[<a id="APP-B-FN-8" href="#ftn.APP-B-FN-8" class="footnote">98</a>]</sup></p><p><sup>[<a id="APP-B-FN-9" href="#ftn.APP-B-FN-9" class="footnote">99</a>]</sup></p></div><div class="footnotes"><br/><hr/><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-1" href="#APP-B-FN-1" class="para">91</a>] </sup>See the <span class="emphasis"><em>Solaris Modular Debugger Guide</em></span> at <a class="ulink" href="http://dlc.sun.com/osol/docs/content/MODDEBUG/moddebug.html">http://dlc.sun.com/osol/docs/content/MODDEBUG/moddebug.html</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-2" href="#APP-B-FN-2" class="para">92</a>] </sup>See <a class="ulink" href="http://www.vmware.com/">http://www.vmware.com/</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-3" href="#APP-B-FN-3" class="para">93</a>] </sup>See <a class="ulink" href="http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx">http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-4" href="#APP-B-FN-4" class="para">94</a>] </sup>See <a class="ulink" href="http://www.gnu.org/software/gdb/documentation/">http://www.gnu.org/software/gdb/documentation/</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-5" href="#APP-B-FN-5" class="para">95</a>] </sup>There are still a few download mirror sites available where you can get the Red Hat 7.3 ISO images. Here are a few, as of this writing: <a class="ulink" href="http://ftp-stud.hs-esslingen.de/Mirrors/archive.download.redhat.com/redhat/linux/7.3/de/iso/i386/">http://ftp-stud.hs-esslingen.de/Mirrors/archive.download.redhat.com/redhat/linux/7.3/de/iso/i386/</a>, <a class="ulink" href="http://mirror.fraunhofer.de/archive.download.redhat.com/redhat/linux/7.3/en/iso/i386/">http://mirror.fraunhofer.de/archive.download.redhat.com/redhat/linux/7.3/en/iso/i386/</a>, and <a class="ulink" href="http://mirror.cs.wisc.edu/pub/mirrors/linux/archive.download.redhat.com/redhat/linux/7.3/en/iso/i386/">http://mirror.cs.wisc.edu/pub/mirrors/linux/archive.download.redhat.com/redhat/linux/7.3/en/iso/i386/</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-6" href="#APP-B-FN-6" class="para">96</a>] </sup>Apple’s custom gdb version can be downloaded at <a class="ulink" href="http://www.opensource.apple.com/tarballs/gdb/gdb-292.tar.gz">http://www.opensource.apple.com/tarballs/gdb/gdb-292.tar.gz</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-7" href="#APP-B-FN-7" class="para">97</a>] </sup>The standard gdb version from GNU can be downloaded at <a class="ulink" href="http://ftp.gnu.org/pub/gnu/gdb/gdb-5.3.tar.gz">http://ftp.gnu.org/pub/gnu/gdb/gdb-5.3.tar.gz</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-8" href="#APP-B-FN-8" class="para">98</a>] </sup>The patch for Apple’s GNU debugger is available at <a class="ulink" href="http://www.trapkit.de/books/bhd/osx_gdb.patch">http://www.trapkit.de/books/bhd/osx_gdb.patch</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-9" href="#APP-B-FN-9" class="para">99</a>] </sup>The XNU version 792.13.8 can be downloaded at <a class="ulink" href="http://www.opensource.apple.com/tarballs/xnu/xnu-792.13.8.tar.gz">http://www.opensource.apple.com/tarballs/xnu/xnu-792.13.8.tar.gz</a>.</p></div></div></div></body></html>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>B.5 Using Linux as a Mac OS X Kernel-Debugging Host</title><link rel="stylesheet" href="core.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.74.0"/></head><body><div class="sect1" title="B.5 Using Linux as a Mac OS X Kernel-Debugging Host"><div class="titlepage"><div><div><h1 class="title"><a id="b.5_using_linux_as_a_mac_os_x_kernel-deb"/>B.5 Using Linux as a Mac OS X Kernel-Debugging Host</h1></div></div></div><p>In this section, I will detail the steps I performed to prepare a Linux system as a debugging host for the Mac OS X kernel:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Step 1: Install an ancient Red Hat 7.3 Linux operating system.<a id="IDX-APP-B-0088" class="indexterm"/></p></li><li class="listitem"><p>Step 2: Get the necessary software packages.</p></li><li class="listitem"><p>Step 3: Build Apple’s debugger on the Linux host.<a id="IDX-APP-B-0089" class="indexterm"/></p></li><li class="listitem"><p>Step 4: Prepare the debugging environment.</p></li></ul></div><div class="sect2" title="Step 1: Install an Ancient Red Hat 7.3 Linux Operating System"><div class="titlepage"><div><div><h2 class="title"><a id="step_1_colon_install_an_ancient_red_hat"/>Step 1: Install an Ancient Red Hat 7.3 Linux Operating System</h2></div></div></div><p>Because Apple’s GNU Debugger (gdb) version that I used needs a GNU C Compiler (gcc) less than version 3 to build correctly, I downloaded and installed an ancient Red Hat 7.3 Linux system.<sup>[<a href="apbs05.html#ftn.APP-B-FN-5" class="footnoteref">95</a>]</sup> To install the Red Hat system, I chose the installation type Custom. When I was asked to select the packages to install (Package Group Selection), I chose only the packages Network Support and Software Development, as well as OpenSSH server from the individual package selection. These packages include all the necessary development tools and libraries to build Apple’s gdb under Linux. During the installation, I added an unprivileged user called <code class="literal">tk</code> with a home directory under <span class="emphasis"><em>/home/tk</em></span>.</p></div><div class="sect2" title="Step 2: Get the Necessary Software Packages"><div class="titlepage"><div><div><h2 class="title"><a id="step_2_colon_get_the_necessary_software"/>Step 2: Get the Necessary Software Packages</h2></div></div></div><p>After I had successfully installed the Linux host, I downloaded the following software packages:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Source code of Apple’s custom gdb version.<sup>[<a href="apbs05.html#ftn.APP-B-FN-6" class="footnoteref">96</a>]</sup></p></li><li class="listitem"><p>Standard gdb source code from GNU.<sup>[<a href="apbs05.html#ftn.APP-B-FN-7" class="footnoteref">97</a>]</sup></p></li><li class="listitem"><p>A patch for Apple’s gdb to compile under Linux.<sup>[<a href="apbs05.html#ftn.APP-B-FN-8" class="footnoteref">98</a>]</sup></p></li><li class="listitem"><p>The appropriate source code version of the XNU kernel. I prepared the Linux debugging host to research the kernel bug described in <a class="xref" href="ch07.html" title="Chapter 7. A Bug Older Than 4.4BSD">Chapter 7</a>, so I downloaded the XNU version 792.13.8.<sup>[<a href="apbs05.html#ftn.APP-B-FN-9" class="footnoteref">99</a>]</sup><a id="IDX-APP-B-0090" class="indexterm"/></p></li><li class="listitem"><p>The appropriate version of Apple’s Kernel Debug Kit. I found the bug explored in <a class="xref" href="ch07.html" title="Chapter 7. A Bug Older Than 4.4BSD">Chapter 7</a> on Mac OS X 10.4.8, so I downloaded the corresponding Kernel Debug Kit version 10.4.8 (<span class="emphasis"><em>Kernel_Debug_Kit_10.4.8_8L2127.dmg</em></span>).<a id="IDX-APP-B-0091" class="indexterm"/></p></li></ul></div></div><div class="sect2" title="Step 3: Build Apple’s Debugger on the Linux Host"><div class="titlepage"><div><div><h2 class="title"><a id="step_3_colon_build_appleas_debugger_on_t"/>Step 3: Build Apple’s Debugger on the Linux Host</h2></div></div></div><p>After I downloaded the necessary software packages onto the Linux host, I unpacked the two versions of gdb:</p><a id="I_programlisting_d1e11863"/><pre class="programlisting">linux$ <strong class="userinput"><code>tar xvzf gdb-292.tar.gz</code></strong>
linux$ <strong class="userinput"><code>tar xvzf gdb-5.3.tar.gz</code></strong></pre><p>Then I replaced the <span class="emphasis"><em>mmalloc</em></span> directory of Apple’s source tree with the one from GNU gdb:</p><a id="I_programlisting_d1e11875"/><pre class="programlisting">linux$ <strong class="userinput"><code>mv gdb-292/src/mmalloc gdb-292/src/old_mmalloc</code></strong>
linux$ <strong class="userinput"><code>cp -R gdb-5.3/mmalloc gdb-292/src/</code></strong></pre><p>I applied the patch to Apple’s gdb version:</p><a id="I_programlisting_d1e11884"/><pre class="programlisting">linux$ <strong class="userinput"><code>cd gdb-292/src/</code></strong>
linux$ <strong class="userinput"><code>patch -p2 &lt; ../../osx_gdb.patch</code></strong>
patching file gdb/doc/stabs.texinfo
patching file gdb/fix-and-continue.c
patching file gdb/mach-defs.h
patching file gdb/macosx/macosx-nat-dyld.h
patching file gdb/mi/mi-cmd-stack.c</pre><p>I used the following commands to build the necessary libraries:</p><a id="I_programlisting_d1e11894"/><pre class="programlisting">linux$ <strong class="userinput"><code>su</code></strong>
Password:

linux# <strong class="userinput"><code>pwd</code></strong>
/home/tk/gdb-292/src

linux# <strong class="userinput"><code>cd readline</code></strong>
linux# <strong class="userinput"><code>./configure; make</code></strong>

linux# <strong class="userinput"><code>cd ../bfd</code></strong>
linux# <strong class="userinput"><code>./configure --target=i386-apple-darwin</code></strong>
 <strong class="userinput"><code>--program-suffix=_osx; make;</code></strong>                      → <strong class="userinput"><code>make install</code></strong>

linux# <strong class="userinput"><code>cd ../mmalloc</code></strong>
linux# <strong class="userinput"><code>./configure; make; make install</code></strong>

linux# <strong class="userinput"><code>cd ../intl</code></strong>
linux# <strong class="userinput"><code>./configure; make; make install</code></strong>

linux# <strong class="userinput"><code>cd ../libiberty</code></strong>
linux# <strong class="userinput"><code>./configure; make; make install</code></strong>

linux# <strong class="userinput"><code>cd ../opcodes</code></strong>
linux# <strong class="userinput"><code>./configure --target=i386-apple-darwin --program</code></strong>
<strong class="userinput"><code>-suffix=_osx; make;</code></strong>                      → <strong class="userinput"><code>make install</code></strong></pre><p>To build the debugger itself, I needed to copy some header files from the XNU kernel source code to the <span class="emphasis"><em>include</em></span> directory of the Linux host:</p><a id="I_programlisting_d1e11957"/><pre class="programlisting">linux# <strong class="userinput"><code>cd /home/tk</code></strong>
linux# <strong class="userinput"><code>tar -zxvf xnu-792.13.8.tar.gz</code></strong>
linux# <strong class="userinput"><code>cp -R xnu-792.13.8/osfmk/i386/ /usr/include/</code></strong>
linux# <strong class="userinput"><code>cp -R xnu-792.13.8/bsd/i386/ /usr/include/</code></strong>
cp: overwrite `/usr/include/i386/Makefile'? <strong class="userinput"><code>y</code></strong>
cp: overwrite `/usr/include/i386/endian.h'? <strong class="userinput"><code>y</code></strong>
cp: overwrite `/usr/include/i386/exec.h'? <strong class="userinput"><code>y</code></strong>
cp: overwrite `/usr/include/i386/setjmp.h'? <strong class="userinput"><code>y</code></strong>
linux# <strong class="userinput"><code>cp -R xnu-792.13.8/osfmk/mach /usr/include/</code></strong></pre><p>I then commented some typedefs in the new <span class="emphasis"><em>_types.h</em></span> file to avoid compile-time conflicts (see line 39, lines 43 to 49, and lines 78 to 81):</p><a id="I_programlisting_d1e11992"/><pre class="programlisting">linux# <strong class="userinput"><code>vi +38 /usr/include/i386/_types.h</code></strong>
[..]
     38 #ifdef __GNUC__
     <strong class="userinput"><code>39 // typedef __signed char           __int8_t;</code></strong>
     40 #else   /* !__GNUC__ */
     41 typedef char                    __int8_t;
     42 #endif  /* !__GNUC__ */
     <strong class="userinput"><code>43 // typedef unsigned char           __uint8_t;</code></strong>
     <strong class="userinput"><code>44 // typedef short                   __int16_t;</code></strong>
     <strong class="userinput"><code>45 // typedef unsigned short          __uint16_t;</code></strong>
     <strong class="userinput"><code>46 // typedef int                     __int32_t;</code></strong>
     <strong class="userinput"><code>47 // typedef unsigned int            __uint32_t;</code></strong>
     <strong class="userinput"><code>48 // typedef long long               __int64_t;</code></strong>
     <strong class="userinput"><code>49 // typedef unsigned long long      __uint64_t;</code></strong>
     ..
     <strong class="userinput"><code>78 //typedef union {</code></strong>
     <strong class="userinput"><code>79 //      char            __mbstate8[128];</code></strong>
     <strong class="userinput"><code>80 //      long long       _mbstateL;                      /* for alignment */</code></strong>
     <strong class="userinput"><code>81 //} __mbstate_t;</code></strong>
[..]</pre><p>I added a new <code class="literal">include</code> to the file <span class="emphasis"><em>/home/tk/gdb-292/src/gdb/macosx/i386-macosx-tdep.c</em></span> (see line 24):</p><a id="I_programlisting_d1e12043"/><pre class="programlisting">linux# <strong class="userinput"><code>vi +24 /home/tk/gdb-292/src/gdb/macosx/i386-macosx-tdep.c</code></strong>
[..]
     <strong class="userinput"><code>24 #include &lt;string.h&gt;</code></strong>
     25 #include "defs.h"
     26 #include "frame.h"
     27 #include "inferior.h"
[..]</pre><p>Finally, I compiled the debugger with the following commands:</p><a id="I_programlisting_d1e12053"/><pre class="programlisting">linux# <strong class="userinput"><code>cd gdb-292/src/gdb/</code></strong>
linux# <strong class="userinput"><code>./configure --target=i386-apple-darwin --program-suffix=_osx --disable-gdbtk</code></strong>
linux# <strong class="userinput"><code>make; make install</code></strong></pre><p>After the compilation completed, I ran the new debugger as root so that the necessary directories could be created under <span class="emphasis"><em>/usr/local/bin/</em></span>:</p><a id="I_programlisting_d1e12068"/><pre class="programlisting">linux# <strong class="userinput"><code>cd /home/tk</code></strong>
linux# <strong class="userinput"><code>gdb_osx -q</code></strong>
(gdb) <strong class="userinput"><code>quit</code></strong></pre><p>After that, the debugger was ready.</p></div><div class="sect2" title="Step 4: Prepare the Debugging Environment"><div class="titlepage"><div><div><h2 class="title"><a id="step_4_colon_prepare_the_debugging_envir"/>Step 4: Prepare the Debugging Environment</h2></div></div></div><p>I unpacked the downloaded Kernel Debug Kit disk image file (dmg) under Mac OS X, transferred the files per <code class="literal">scp</code> to the Linux host, and named the directory <span class="emphasis"><em>KernelDebugKit_10.4.8</em></span>. I also copied the XNU source code into the search path of the debugger:</p><a id="I_programlisting_d1e12091"/><pre class="programlisting">linux# <strong class="userinput"><code>mkdir /SourceCache</code></strong>
linux# <strong class="userinput"><code>mkdir /SourceCache/xnu</code></strong>
linux# <strong class="userinput"><code>mv xnu-792.13.8 /SourceCache/xnu/</code></strong></pre><p>In <a class="xref" href="ch07.html" title="Chapter 7. A Bug Older Than 4.4BSD">Chapter 7</a>, I described how the newly built kernel debugger can be used to connect to a Mac OS X machine.</p></div><div class="sect2" title="Notes"><div class="titlepage"><div><div><h2 class="title"><a id="notes-id9"/>Notes</h2></div></div></div><p><sup>[<a id="APP-B-FN-1" href="#ftn.APP-B-FN-1" class="footnote">91</a>]</sup></p><p><sup>[<a id="APP-B-FN-2" href="#ftn.APP-B-FN-2" class="footnote">92</a>]</sup></p><p><sup>[<a id="APP-B-FN-3" href="#ftn.APP-B-FN-3" class="footnote">93</a>]</sup></p><p><sup>[<a id="APP-B-FN-4" href="#ftn.APP-B-FN-4" class="footnote">94</a>]</sup></p><p><sup>[<a id="APP-B-FN-5" href="#ftn.APP-B-FN-5" class="footnote">95</a>]</sup></p><p><sup>[<a id="APP-B-FN-6" href="#ftn.APP-B-FN-6" class="footnote">96</a>]</sup></p><p><sup>[<a id="APP-B-FN-7" href="#ftn.APP-B-FN-7" class="footnote">97</a>]</sup></p><p><sup>[<a id="APP-B-FN-8" href="#ftn.APP-B-FN-8" class="footnote">98</a>]</sup></p><p><sup>[<a id="APP-B-FN-9" href="#ftn.APP-B-FN-9" class="footnote">99</a>]</sup></p></div><div class="footnotes"><br/><hr/><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-1" href="#APP-B-FN-1" class="para">91</a>] </sup>See the <span class="emphasis"><em>Solaris Modular Debugger Guide</em></span> at <a class="ulink" href="http://dlc.sun.com/osol/docs/content/MODDEBUG/moddebug.html">http://dlc.sun.com/osol/docs/content/MODDEBUG/moddebug.html</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-2" href="#APP-B-FN-2" class="para">92</a>] </sup>See <a class="ulink" href="http://www.vmware.com/">http://www.vmware.com/</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-3" href="#APP-B-FN-3" class="para">93</a>] </sup>See <a class="ulink" href="http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx">http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-4" href="#APP-B-FN-4" class="para">94</a>] </sup>See <a class="ulink" href="http://www.gnu.org/software/gdb/documentation/">http://www.gnu.org/software/gdb/documentation/</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-5" href="#APP-B-FN-5" class="para">95</a>] </sup>There are still a few download mirror sites available where you can get the Red Hat 7.3 ISO images. Here are a few, as of this writing: <a class="ulink" href="http://ftp-stud.hs-esslingen.de/Mirrors/archive.download.redhat.com/redhat/linux/7.3/de/iso/i386/">http://ftp-stud.hs-esslingen.de/Mirrors/archive.download.redhat.com/redhat/linux/7.3/de/iso/i386/</a>, <a class="ulink" href="http://mirror.fraunhofer.de/archive.download.redhat.com/redhat/linux/7.3/en/iso/i386/">http://mirror.fraunhofer.de/archive.download.redhat.com/redhat/linux/7.3/en/iso/i386/</a>, and <a class="ulink" href="http://mirror.cs.wisc.edu/pub/mirrors/linux/archive.download.redhat.com/redhat/linux/7.3/en/iso/i386/">http://mirror.cs.wisc.edu/pub/mirrors/linux/archive.download.redhat.com/redhat/linux/7.3/en/iso/i386/</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-6" href="#APP-B-FN-6" class="para">96</a>] </sup>Apple’s custom gdb version can be downloaded at <a class="ulink" href="http://www.opensource.apple.com/tarballs/gdb/gdb-292.tar.gz">http://www.opensource.apple.com/tarballs/gdb/gdb-292.tar.gz</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-7" href="#APP-B-FN-7" class="para">97</a>] </sup>The standard gdb version from GNU can be downloaded at <a class="ulink" href="http://ftp.gnu.org/pub/gnu/gdb/gdb-5.3.tar.gz">http://ftp.gnu.org/pub/gnu/gdb/gdb-5.3.tar.gz</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-8" href="#APP-B-FN-8" class="para">98</a>] </sup>The patch for Apple’s GNU debugger is available at <a class="ulink" href="http://www.trapkit.de/books/bhd/osx_gdb.patch">http://www.trapkit.de/books/bhd/osx_gdb.patch</a>.</p></div><div class="footnote"><p><sup>[<a id="ftn.APP-B-FN-9" href="#APP-B-FN-9" class="para">99</a>] </sup>The XNU version 792.13.8 can be downloaded at <a class="ulink" href="http://www.opensource.apple.com/tarballs/xnu/xnu-792.13.8.tar.gz">http://www.opensource.apple.com/tarballs/xnu/xnu-792.13.8.tar.gz</a>.</p></div></div></div></body></html>
