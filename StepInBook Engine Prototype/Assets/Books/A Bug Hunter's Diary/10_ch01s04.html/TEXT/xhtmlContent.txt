<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>1.4 Tools of the Trade</title><link rel="stylesheet" href="core.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.74.0"/></head><body><div class="sect1" title="1.4 Tools of the Trade"><div class="titlepage"><div><div><h1 class="title"><a id="tools_of_the_trade"/>1.4 Tools of the Trade</h1></div></div></div><p>When searching for bugs, or building exploits to test them, I need a way to see inside the workings of applications. I most often use debuggers and disassemblers to gain that inside view.<a id="IDX-CHP-1-0015" class="indexterm"/></p><div class="sect2" title="Debuggers"><div class="titlepage"><div><div><h2 class="title"><a id="debuggers"/>Debuggers</h2></div></div></div><p>A debugger normally provides methods to attach to user space processes or the kernel, write and read values to and from registers and memory, and to control program flow using features such as breakpoints or single-stepping. Each operating system typically ships with its own debugger, but several third-party debuggers are available as well. <a class="xref" href="ch01s04.html#debuggers_used_in_this_book" title="Table 1-1. Debuggers Used in This Book">Table 1-1</a> lists the different operating system platforms and the debuggers used in this book.</p><div class="table"><a id="debuggers_used_in_this_book"/><p class="title">Table 1-1. Debuggers Used in This Book</p><div class="table-contents"><table summary="Debuggers Used in This Book" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col/><col/><col/></colgroup><thead><tr><th style="text-align: left" valign="bottom"><p>Operating system<a id="IDX-CHP-1-0016" class="indexterm"/><a id="IDX-CHP-1-0017" class="indexterm"/><a id="IDX-CHP-1-0018" class="indexterm"/><a id="IDX-CHP-1-0019" class="indexterm"/><a id="IDX-CHP-1-0020" class="indexterm"/><a id="IDX-CHP-1-0021" class="indexterm"/><a id="IDX-CHP-1-0022" class="indexterm"/><a id="IDX-CHP-1-0023" class="indexterm"/><a id="IDX-CHP-1-0024" class="indexterm"/><a id="IDX-CHP-1-0025" class="indexterm"/></p></th><th style="text-align: left" valign="bottom"><p>Debugger</p></th><th style="text-align: left" valign="bottom"><p>Kernel debugging<a id="IDX-CHP-1-0026" class="indexterm"/></p></th></tr></thead><tbody><tr><td style="text-align: left" valign="top"><p>Microsoft</p></td><td style="text-align: left" valign="top"><p>WinDbg (the official debugger from Microsoft)<a id="IDX-CHP-1-0027" class="indexterm"/><a id="IDX-CHP-1-0028" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr><tr><td style="text-align: left" valign="top"><p>Windows</p></td><td style="text-align: left" valign="top"><p>OllyDbg and its variant Immunity Debugger<a id="IDX-CHP-1-0029" class="indexterm"/><a id="IDX-CHP-1-0030" class="indexterm"/><a id="IDX-CHP-1-0031" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>no</p></td></tr><tr><td style="text-align: left" valign="top"><p>Linux</p></td><td style="text-align: left" valign="top"><p>The GNU Debugger (gdb)<a id="IDX-CHP-1-0032" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr><tr><td style="text-align: left" valign="top"><p>Solaris</p></td><td style="text-align: left" valign="top"><p>The Modular Debugger (mdb)<a id="IDX-CHP-1-0033" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr><tr><td style="text-align: left" valign="top"><p>Mac OS X<a id="IDX-CHP-1-0034" class="indexterm"/><a id="IDX-CHP-1-0035" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>The GNU Debugger (gdb)</p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr><tr><td style="text-align: left" valign="top"><p>Apple iOS</p></td><td style="text-align: left" valign="top"><p>The GNU Debugger (gdb)</p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr></tbody></table></div></div><p>These debuggers will be used to identify, analyze and exploit the vulnerabilities that I discovered. See also Sections B.1, B.2, and B.4 for some debugger command cheat sheets.</p></div><div class="sect2" title="Disassemblers"><div class="titlepage"><div><div><h2 class="title"><a id="disassemblers"/>Disassemblers</h2></div></div></div><p>If you want to audit an application and don’t have access to the source code, you can analyze the program binaries by reading the application’s assembly code. Although debuggers have the ability to disassemble the code of a process or the kernel, they usually are not especially easy or intuitive to work with. A program that fills this gap is the Interactive Disassembler Professional, better known as IDA Pro.<sup>[<a href="ch01s06.html#ftn.CHP-1-FN-4" class="footnoteref">4</a>]</sup> IDA Pro supports more than 50 families of processors and provides full interactivity, extensibility, and code graphing. If you want to audit a program binary, IDA Pro is a must-have. For an exhaustive treatment of IDA Pro and all of its features, consult Chris Eagle’s <span class="emphasis"><em>The IDA Pro Book</em></span>, 2nd edition (No Starch Press, 2011).</p></div></div></body></html>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>1.4 Tools of the Trade</title><link rel="stylesheet" href="core.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.74.0"/></head><body><div class="sect1" title="1.4 Tools of the Trade"><div class="titlepage"><div><div><h1 class="title"><a id="tools_of_the_trade"/>1.4 Tools of the Trade</h1></div></div></div><p>When searching for bugs, or building exploits to test them, I need a way to see inside the workings of applications. I most often use debuggers and disassemblers to gain that inside view.<a id="IDX-CHP-1-0015" class="indexterm"/></p><div class="sect2" title="Debuggers"><div class="titlepage"><div><div><h2 class="title"><a id="debuggers"/>Debuggers</h2></div></div></div><p>A debugger normally provides methods to attach to user space processes or the kernel, write and read values to and from registers and memory, and to control program flow using features such as breakpoints or single-stepping. Each operating system typically ships with its own debugger, but several third-party debuggers are available as well. <a class="xref" href="ch01s04.html#debuggers_used_in_this_book" title="Table 1-1. Debuggers Used in This Book">Table 1-1</a> lists the different operating system platforms and the debuggers used in this book.</p><div class="table"><a id="debuggers_used_in_this_book"/><p class="title">Table 1-1. Debuggers Used in This Book</p><div class="table-contents"><table summary="Debuggers Used in This Book" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col/><col/><col/></colgroup><thead><tr><th style="text-align: left" valign="bottom"><p>Operating system<a id="IDX-CHP-1-0016" class="indexterm"/><a id="IDX-CHP-1-0017" class="indexterm"/><a id="IDX-CHP-1-0018" class="indexterm"/><a id="IDX-CHP-1-0019" class="indexterm"/><a id="IDX-CHP-1-0020" class="indexterm"/><a id="IDX-CHP-1-0021" class="indexterm"/><a id="IDX-CHP-1-0022" class="indexterm"/><a id="IDX-CHP-1-0023" class="indexterm"/><a id="IDX-CHP-1-0024" class="indexterm"/><a id="IDX-CHP-1-0025" class="indexterm"/></p></th><th style="text-align: left" valign="bottom"><p>Debugger</p></th><th style="text-align: left" valign="bottom"><p>Kernel debugging<a id="IDX-CHP-1-0026" class="indexterm"/></p></th></tr></thead><tbody><tr><td style="text-align: left" valign="top"><p>Microsoft</p></td><td style="text-align: left" valign="top"><p>WinDbg (the official debugger from Microsoft)<a id="IDX-CHP-1-0027" class="indexterm"/><a id="IDX-CHP-1-0028" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr><tr><td style="text-align: left" valign="top"><p>Windows</p></td><td style="text-align: left" valign="top"><p>OllyDbg and its variant Immunity Debugger<a id="IDX-CHP-1-0029" class="indexterm"/><a id="IDX-CHP-1-0030" class="indexterm"/><a id="IDX-CHP-1-0031" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>no</p></td></tr><tr><td style="text-align: left" valign="top"><p>Linux</p></td><td style="text-align: left" valign="top"><p>The GNU Debugger (gdb)<a id="IDX-CHP-1-0032" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr><tr><td style="text-align: left" valign="top"><p>Solaris</p></td><td style="text-align: left" valign="top"><p>The Modular Debugger (mdb)<a id="IDX-CHP-1-0033" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr><tr><td style="text-align: left" valign="top"><p>Mac OS X<a id="IDX-CHP-1-0034" class="indexterm"/><a id="IDX-CHP-1-0035" class="indexterm"/></p></td><td style="text-align: left" valign="top"><p>The GNU Debugger (gdb)</p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr><tr><td style="text-align: left" valign="top"><p>Apple iOS</p></td><td style="text-align: left" valign="top"><p>The GNU Debugger (gdb)</p></td><td style="text-align: left" valign="top"><p>yes</p></td></tr></tbody></table></div></div><p>These debuggers will be used to identify, analyze and exploit the vulnerabilities that I discovered. See also Sections B.1, B.2, and B.4 for some debugger command cheat sheets.</p></div><div class="sect2" title="Disassemblers"><div class="titlepage"><div><div><h2 class="title"><a id="disassemblers"/>Disassemblers</h2></div></div></div><p>If you want to audit an application and don’t have access to the source code, you can analyze the program binaries by reading the application’s assembly code. Although debuggers have the ability to disassemble the code of a process or the kernel, they usually are not especially easy or intuitive to work with. A program that fills this gap is the Interactive Disassembler Professional, better known as IDA Pro.<sup>[<a href="ch01s06.html#ftn.CHP-1-FN-4" class="footnoteref">4</a>]</sup> IDA Pro supports more than 50 families of processors and provides full interactivity, extensibility, and code graphing. If you want to audit a program binary, IDA Pro is a must-have. For an exhaustive treatment of IDA Pro and all of its features, consult Chris Eagle’s <span class="emphasis"><em>The IDA Pro Book</em></span>, 2nd edition (No Starch Press, 2011).</p></div></div></body></html>
